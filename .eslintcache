[{"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\index.js":"1","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\reportWebVitals.js":"2","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\App.js":"3","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\card-data.js":"4","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Hero.js":"5","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Form.js":"6","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Navbar.js":"7","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Cards.js":"8","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Card.js":"9","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Fieldset.js":"10","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Error.js":"11","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\index.js":"12","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\reportWebVitals.js":"13","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\App.js":"14","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\card-data.js":"15","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Navbar.js":"16","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Hero.js":"17","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Cards.js":"18","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Form.js":"19","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Card.js":"20","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Fieldset.js":"21","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Error.js":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":2455,"mtime":1607793006600,"results":"26","hashOfConfig":"24"},{"size":657,"mtime":1607703034104,"results":"27","hashOfConfig":"24"},{"size":731,"mtime":1607735695814,"results":"28","hashOfConfig":"24"},{"size":11126,"mtime":1607859250046,"results":"29","hashOfConfig":"24"},{"size":393,"mtime":1607856130751,"results":"30","hashOfConfig":"24"},{"size":1857,"mtime":1607860348036,"results":"31","hashOfConfig":"24"},{"size":2037,"mtime":1607858794416,"results":"32","hashOfConfig":"24"},{"size":3000,"mtime":1607858870406,"results":"33","hashOfConfig":"24"},{"size":353,"mtime":1607858849794,"results":"34","hashOfConfig":"24"},{"size":500,"mtime":499162500000,"results":"35","hashOfConfig":"36"},{"size":362,"mtime":499162500000,"results":"37","hashOfConfig":"36"},{"size":2455,"mtime":1607793006600,"results":"38","hashOfConfig":"36"},{"size":657,"mtime":1607703034104,"results":"39","hashOfConfig":"36"},{"size":393,"mtime":1607856130751,"results":"40","hashOfConfig":"36"},{"size":731,"mtime":1607735695814,"results":"41","hashOfConfig":"36"},{"size":1857,"mtime":1607860348036,"results":"42","hashOfConfig":"36"},{"size":11126,"mtime":1607859250046,"results":"43","hashOfConfig":"36"},{"size":2037,"mtime":1607858794416,"results":"44","hashOfConfig":"36"},{"size":3000,"mtime":1607858870406,"results":"45","hashOfConfig":"36"},{"size":353,"mtime":1607858849794,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1r4scxh",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"49"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"49"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"102p3h3",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\index.js",[],["95","96"],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\reportWebVitals.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\App.js",["97"],"import './App.css';\nimport React, { useEffect, useState } from 'react'\nimport Navbar from './Components/Navbar'\nimport Hero from './Components/Hero';\nimport Form from './Components/Form';\nimport Cards from './Components/Cards';\nimport { cards } from './card-data';\n\nfunction App() {\n\n  const [newCustomer, setNewCustomer] = useState({});\n  const [availableCards, setAvailableCards] = useState([])\n  const [cardModalOpen, setCardModalOpen] = useState(false);\n  const initialInputValues = {\n    title: 'Mr',\n    firstName: '',\n    lastName: '',\n    dob: {\n      day: '',\n      month: '',\n      year: ''\n    },\n    employmentStatus: 'Full Time',\n    income: '',\n    postcode: '',\n    manualAddress: {\n      line_1: '',\n      line_2: '',\n      line_3: '',\n      city: '',\n      county: '',\n      post_code: ''\n    }\n  }\n  const [inputValues, setInputValues] = useState(initialInputValues);\n\n  useEffect(() => {\n    checkAvailableCards();\n  }, [newCustomer])\n\n  const resetInputValues = () => {\n    setInputValues(initialInputValues);\n  }\n\n  const createNewCustomer = (customer) => {\n    setNewCustomer(customer)\n    setCardModalOpen(true);\n  }\n\n  //HANDLE INPUT CHANGES \n  const handleInputChange = e => {\n    const { name, value } = e.target;\n    setInputValues({ ...inputValues, [name]: value })\n  }\n\n  const handleInputObjectChange = e => {\n    const { id, name, value } = e.target;\n    setInputValues({\n      ...inputValues,\n      [id]: {\n        ...inputValues[id],\n        [name]: value\n      }\n    })\n  }\n\n  //DESTRUCTURED CARD ARRAY\n  const [student, anywhere, liquid] = cards\n\n  const checkAvailableCards = () => {\n    let newCards = [anywhere];\n\n    if ((parseFloat(newCustomer.income)) > 16000) {\n      newCards.push(liquid)\n    }\n    if (newCustomer.employment_status === 'Student') {\n      newCards.push(student);\n    }\n\n    setAvailableCards(newCards)\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <Navbar />\n        <Hero />\n        <Form\n          check={checkAvailableCards}\n          createNewCustomer={createNewCustomer}\n          inputValues={inputValues}\n          handleInputChange={handleInputChange}\n          handleInputObjectChange={handleInputObjectChange}\n          resetInputValues={resetInputValues} />\n        <Cards\n          cards={availableCards}\n          customer={newCustomer}\n          cardModal={cardModalOpen}\n          setModal={setCardModalOpen} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\card-data.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Hero.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Form.js",["98"],"import React, { useEffect, useState } from 'react';\r\nimport Fieldset from './Fieldset';\r\n\r\nconst addressSelectStyle = {\r\n    display: 'block',\r\n    margin: '27px 0 10px',\r\n    width: '100%',\r\n    padding: '12px 5px',\r\n    borderRadius: '5px',\r\n    cursor: 'pointer'\r\n}\r\n\r\n\r\nfunction Form({ createNewCustomer, inputValues, handleInputChange, handleInputObjectChange, resetInputValues }) {\r\n\r\n    const { title,\r\n        firstName,\r\n        lastName,\r\n        dob,\r\n        employmentStatus,\r\n        income,\r\n        postcode,\r\n        manualAddress } = inputValues;\r\n\r\n    const [address, setAddress] = useState('');\r\n    const [addressOptions, setAddressOptions] = useState([]);\r\n    const [showAddressForm, setShowAddressForm] = useState(false);\r\n\r\n    const initialErrorState = {\r\n        nameError: '',\r\n        dobError: '',\r\n        incomeError: '',\r\n        postcodeError: '',\r\n        addressError: ''\r\n    }\r\n\r\n    const [errors, setErrors] = useState(initialErrorState);\r\n\r\n    const { nameError, dobError, incomeError, postcodeError, addressError } = errors;\r\n\r\n    useEffect(() => {\r\n        getAddress(postcode);\r\n    }, [postcode])\r\n\r\n    //TWO DIGIT DATE/MONTH\r\n    const dayMonthDigits = num => {\r\n        return (num < 10 && num.length === 1 ? '0' : '') + num;\r\n    }\r\n\r\n    //CALCULATE AGE FROM BIRTHDAY\r\n    const calculateAge = birthday => {\r\n        const ageDifMs = Date.now() - birthday.getTime();\r\n        const ageDate = new Date(ageDifMs); // miliseconds from epoch\r\n        return Math.abs(ageDate.getUTCFullYear() - 1970);\r\n    }\r\n\r\n    // SET MAX NUMBERS WITH type=\"number\"\r\n    const maxNumbers = (e) => {\r\n        if (e.target.value.length > e.target.maxLength) {\r\n            e.target.value = e.target.value.slice(0, e.target.maxLength)\r\n        }\r\n    }\r\n\r\n    // GET ADDRESS LIST FROM POSTCODE API\r\n    const getAddress = async (postcode) => {\r\n        if (postcodeRegex.test(postcode)) {\r\n            const API_KEY = 'J2yiJ6nG10OCqsfLfrot_Q29462'\r\n            const res = await fetch(`https://api.getAddress.io/find/${postcode}?api-key=${API_KEY}`);\r\n            const data = await res.json();\r\n            setAddressOptions(data.addresses);\r\n        }\r\n    }\r\n\r\n    // VALIDATION REGEX\r\n    const nameRegex = /^[a-z ,.'-]+$/i;\r\n    const dateRegex = /^(0[1-9]|1\\d|2\\d|3[01])\\/(0[1-9]|1[0-2])\\/(19|20)\\d{2}$/;\r\n    const postcodeRegex = /^([A-Za-z][A-Ha-hJ-Yj-y]?[0-9][A-Za-z0-9]? ?[0-9][A-Za-z]{2}|[Gg][Ii][Rr] ?0[Aa]{2})$/i;\r\n\r\n    // VALIDATE INPUT FIELDS\r\n    const handleValidation = () => {\r\n        let isFormValid = true;\r\n        setErrors(initialErrorState);\r\n\r\n        //name\r\n        if (!nameRegex.test(firstName) || !nameRegex.test(lastName)) {\r\n            setErrors(errors => ({ ...errors, nameError: \"Only letters, apostrophes, and spaces allowed\" }))\r\n            isFormValid = false;\r\n        }\r\n        if (firstName === \"\" || lastName === \"\") {\r\n            setErrors(errors => ({ ...errors, nameError: \"This field is required\" }))\r\n            isFormValid = false;\r\n        }\r\n\r\n        //dob \r\n        const { day, month, year } = dob;\r\n        const birthday = new Date(year, month - 1, day);\r\n\r\n        if (!(dateRegex.test(`${dayMonthDigits(day)}/${dayMonthDigits(month)}/${year}`))) {\r\n            setErrors(errors => ({ ...errors, dobError: \"Somethings wrong with this date\" }))\r\n            isFormValid = false;\r\n        }\r\n        if (calculateAge(birthday) < 18) {\r\n            setErrors(errors => ({ ...errors, dobError: \"Must be at least 18\" }))\r\n            isFormValid = false;\r\n        }\r\n        if (day === \"\" || month === \"\" || year === \"\") {\r\n            setErrors(errors => ({ ...errors, dobError: \"This field is required\" }))\r\n            isFormValid = false;\r\n        }\r\n\r\n        //income\r\n        if (income > 10000000) {\r\n            setErrors(errors => ({ ...errors, incomeError: \"Annual income can not be over £10000000\" }))\r\n            isFormValid = false;\r\n        }\r\n        if (income === \"\") {\r\n            setErrors(errors => ({ ...errors, incomeError: \"This field is required\" }))\r\n            isFormValid = false;\r\n        }\r\n\r\n        //address\r\n        if (showAddressForm) {\r\n            const { line_1, city, county, post_code } = manualAddress;\r\n\r\n            if (!postcodeRegex.test(post_code)) {\r\n                setErrors(errors => ({ ...errors, addressError: \"Please enter a correct postcode\" }))\r\n                isFormValid = false;\r\n            }\r\n            if (!nameRegex.test(city) || !nameRegex.test(county)) {\r\n                setErrors(errors => ({ ...errors, addressError: \"Please check address fields\" }))\r\n                isFormValid = false;\r\n            }\r\n            if (line_1 === \"\" || city === '' || county === '' || post_code === '') {\r\n                setErrors(errors => ({ ...errors, addressError: \"Please fill in required fields\" }))\r\n                isFormValid = false;\r\n            }\r\n        } else {\r\n            //postcode\r\n            if (postcode === \"\") {\r\n                setErrors(errors => ({ ...errors, postcodeError: \"This field is required\" }))\r\n                isFormValid = false;\r\n            }\r\n        }\r\n        return isFormValid;\r\n    }\r\n\r\n    // SUBMIT BUTTON CLICK\r\n    const submitForm = e => {\r\n        e.preventDefault();\r\n\r\n        if (showAddressForm) {\r\n            const addressString = Object.values(manualAddress).map(line => ' ' + line).filter(el => el !== '').toString();\r\n            setAddress(addressString);\r\n        }\r\n\r\n        if (handleValidation()) {\r\n            const newCustomer = {\r\n                full_name: `${title} ${firstName} ${lastName}`,\r\n                first_name: `${firstName}`,\r\n                dob: dob.day + dob.month + dob.year,\r\n                employment_status: employmentStatus,\r\n                income: income,\r\n                address: address\r\n            }\r\n            createNewCustomer(newCustomer);\r\n            resetInputValues();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\">\r\n\r\n            <h2>Information</h2>\r\n\r\n            {/* CUSTOM FIELDSET COMPONENT */}\r\n            <Fieldset\r\n                className=\"title-field radio-fields\"\r\n                title=\"Title\"\r\n                number=\"5\"\r\n                type=\"radio\"\r\n                name=\"title\"\r\n                check={title}\r\n                id={['mr', 'mrs', 'ms', 'miss', 'dr']}\r\n                value={['Mr', 'Mrs', 'Ms', 'Miss', 'Dr']}\r\n                change={handleInputChange} />\r\n\r\n            <Fieldset\r\n                className=\"two-col-input space\"\r\n                title=\"Name\"\r\n                number=\"2\"\r\n                type=\"text\"\r\n                placeholder={['First name', 'Last name']}\r\n                name={['firstName', 'lastName']}\r\n                value={[firstName, lastName]}\r\n                change={handleInputChange}\r\n                error={nameError} />\r\n\r\n            <Fieldset\r\n                className=\"dob-field\"\r\n                title=\"Date of birth\"\r\n                number=\"3\"\r\n                type=\"number\"\r\n                placeholder={['DD', 'MM', 'YYYY']}\r\n                name={['day', 'month', 'year']}\r\n                id={['dob', 'dob', 'dob']}\r\n                maxLength={['2', '2', '4']}\r\n                onInput={maxNumbers}\r\n                value={[dob.day, dob.month, dob.year]}\r\n                change={handleInputObjectChange}\r\n                error={dobError} />\r\n\r\n            <Fieldset\r\n                className=\"two-col-input radio-fields\"\r\n                title=\"Employment Status\"\r\n                number=\"7\"\r\n                type=\"radio\"\r\n                name=\"employmentStatus\"\r\n                check={employmentStatus}\r\n                id={['fullTime', 'partTime', 'selfEmployed', 'homemaker', 'unemployed', 'retired', 'student']}\r\n                value={['Full Time', 'Part Time', 'Self Employed', 'Homemaker', 'Unemployed', 'Retired', 'Student']}\r\n                change={handleInputChange} />\r\n\r\n            <Fieldset\r\n                title=\"What is your annual income before tax?\"\r\n                number=\"1\"\r\n                type=\"number\"\r\n                placeholder={['Annual Income']}\r\n                name={['income']}\r\n                id={['income']}\r\n                value={[income]}\r\n                change={handleInputChange}\r\n                error={incomeError} />\r\n\r\n            <div className=\"address_search\" style={showAddressForm ? { display: 'none' } : { display: 'block' }}>\r\n                <Fieldset\r\n                    title=\"Address\"\r\n                    style={{ marginBottom: '10px' }}\r\n                    number=\"1\"\r\n                    type=\"text\"\r\n                    placeholder={[\"Postcode (Search)\"]}\r\n                    id={['postcode']}\r\n                    name={['postcode']}\r\n                    value={[postcode]}\r\n                    change={handleInputChange}\r\n                    error={postcodeError} />\r\n\r\n                <select style={addressOptions.length === 0 ? { display: 'none' } : addressSelectStyle} onChange={e => setAddress(`${e.target.value}, ${postcode}`)}>\r\n                    <option key=\"-1\">Choose an address</option>\r\n                    {addressOptions.map((address, i) => {\r\n                        const newAddress = address.split(',').filter(el => el !== ' ').toString(); //REMOVE EMPTY SPACES FROM ADDRESSES\r\n                        return <option key={i}>{newAddress}</option>\r\n                    })}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"address_search\" style={showAddressForm ? { display: 'block' } : { display: 'none' }}>\r\n                <Fieldset\r\n                    className=\"two-col-input\"\r\n                    style={{ marginBottom: '10px' }}\r\n                    title=\"Address\"\r\n                    number=\"6\"\r\n                    type=\"text\"\r\n                    placeholder={[\r\n                        'Address Line 1', 'Address Line 2 (optional)', 'Address Line 3 (optional)', 'City', 'County', 'Postcode'\r\n                    ]}\r\n                    name={[\r\n                        'line_1', 'line_2', 'line_3', 'city', 'county', 'post_code'\r\n                    ]}\r\n                    id={[\r\n                        'manualAddress', 'manualAddress', 'manualAddress', 'manualAddress', 'manualAddress', 'manualAddress'\r\n                    ]}\r\n                    value={[\r\n                        manualAddress.line_1, manualAddress.line_2, manualAddress.line_3, manualAddress.city, manualAddress.county, manualAddress.post_code\r\n                    ]}\r\n                    change={handleInputObjectChange}\r\n                    error={addressError}\r\n                />\r\n            </div>\r\n\r\n            <p style={{ paddingBottom: '30px', color: '#211f8b', fontWeight: 'bold', cursor: 'pointer', textAlign: 'right' }} onClick={() => setShowAddressForm(!showAddressForm)}>{showAddressForm ? \"Search by postcode\" : \"Enter address manually\"}</p>\r\n\r\n            <div className=\"button-container\">\r\n                <button type=\"submit\" onClick={submitForm}>Submit</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Navbar.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Cards.js",["99"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport Card from './Card';\r\n\r\nfunction Cards({ cards, customer, cardModal, setModal }) {\r\n\r\n    // SET CARD MODAL WIDTH\r\n    const cardRowLength = {\r\n        gridTemplateColumns: `repeat(${cards.length}, 1fr)`\r\n    }\r\n\r\n    const node = useRef();\r\n\r\n    const [cardsSelected, setCardsSelected] = useState(cards);\r\n\r\n    // CLICK OFF MODAL EVENT\r\n    useEffect(() => {\r\n        const clickOutsideModal = e => {\r\n            if (node.current.contains(e.target)) {\r\n                return;\r\n            }\r\n            // outside click\r\n            setModal(false);\r\n        };\r\n        document.addEventListener(\"mousedown\", clickOutsideModal);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", clickOutsideModal);\r\n        };\r\n    }, []);\r\n\r\n    // SELECT COLOURS FOR INDIVIDUAL CARDS\r\n    const cardColors = ['#0E0A39', '#180F63', '#1E4B6D']\r\n\r\n    const totalCredit = cardsSelected.map(card => card.credit_available_pounds);\r\n\r\n    return (\r\n        <div className=\"card-modal\" style={cardModal ? { display: 'block' } : { display: 'none' }}>\r\n            <section className=\"card-container\" ref={node}>\r\n                <h1>Great stuff, {customer.first_name}!<br />Here's what's available to you:</h1>\r\n                <div className=\"card-row\" style={cardRowLength}>\r\n                    {cards.map((card, i) => {\r\n                        return <Card key={i} card={card} color={cardColors[i]} selected={cardsSelected} setSelected={setCardsSelected} />\r\n                    })}\r\n                </div>\r\n                <h2 className=\"total-credit\">Total credit: £{totalCredit.length > 0 ? totalCredit.reduce((a, b) => a + b) : '0'}<span onClick={() => setModal(false)}>Retake</span></h2>\r\n            </section>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Card.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Fieldset.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\REACT\\totallymoney_patrick_shaw_test\\src\\Components\\Error.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\index.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\reportWebVitals.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\App.js",["100"],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\card-data.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Navbar.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Hero.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Cards.js",["101"],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Form.js",["102"],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Card.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Fieldset.js",[],"C:\\Users\\patri\\OneDrive\\Documents\\Web Dev Practice\\totallymoney_candiate_test\\src\\Components\\Error.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":39,"column":6,"nodeType":"109","endLine":39,"endColumn":19,"suggestions":"110"},{"ruleId":"107","severity":1,"message":"111","line":43,"column":8,"nodeType":"109","endLine":43,"endColumn":18,"suggestions":"112"},{"ruleId":"107","severity":1,"message":"113","line":28,"column":8,"nodeType":"109","endLine":28,"endColumn":10,"suggestions":"114"},{"ruleId":"107","severity":1,"message":"108","line":39,"column":6,"nodeType":"109","endLine":39,"endColumn":19,"suggestions":"115"},{"ruleId":"107","severity":1,"message":"113","line":28,"column":8,"nodeType":"109","endLine":28,"endColumn":10,"suggestions":"116"},{"ruleId":"107","severity":1,"message":"111","line":43,"column":8,"nodeType":"109","endLine":43,"endColumn":18,"suggestions":"117"},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkAvailableCards'. Either include it or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has a missing dependency: 'getAddress'. Either include it or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'setModal'. Either include it or remove the dependency array. If 'setModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["122"],["123"],["124"],["125"],"no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"126","fix":"132"},{"desc":"130","fix":"133"},{"desc":"128","fix":"134"},"Update the dependencies array to be: [checkAvailableCards, newCustomer]",{"range":"135","text":"136"},"Update the dependencies array to be: [getAddress, postcode]",{"range":"137","text":"138"},"Update the dependencies array to be: [setModal]",{"range":"139","text":"140"},{"range":"141","text":"136"},{"range":"142","text":"140"},{"range":"143","text":"138"},[939,952],"[checkAvailableCards, newCustomer]",[1134,1144],"[getAddress, postcode]",[822,824],"[setModal]",[939,952],[822,824],[1134,1144]]